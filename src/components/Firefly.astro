<div class="fixed inset-0 pointer-events-none -z-[10]">
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
</div>

<style>
    .firefly {
        position: absolute;
        width: 6px;
        height: 6px;
        background: #d500d5;
        border-radius: 50%;
        box-shadow:
            0 0 15px 5px rgba(213, 0, 213, 0.7),
            0 0 30px 10px rgba(213, 0, 213, 0.3);
        animation: flutter linear infinite;
    }

    @keyframes flutter {
        0%,
        100% {
            transform: translate(0, 0);
            opacity: 0.9;
        }
        16% {
            transform: translate(calc(-9vw + 18vw * var(--random-x1)), calc(-9vh + 18vh * var(--random-y1)));
            opacity: 0.8;
        }
        32% {
            transform: translate(calc(-9vw + 18vw * var(--random-x2)), calc(-9vh + 18vh * var(--random-y2)));
            opacity: 0.7;
        }
        48% {
            transform: translate(calc(-9vw + 18vw * var(--random-x3)), calc(-9vh + 18vh * var(--random-y3)));
            opacity: 0.6;
        }
        64% {
            transform: translate(calc(-9vw + 18vw * var(--random-x4)), calc(-9vh + 18vh * var(--random-y4)));
            opacity: 0.7;
        }
        80% {
            transform: translate(calc(-9vw + 18vw * var(--random-x5)), calc(-9vh + 18vh * var(--random-y5)));
            opacity: 0.8;
        }
    }
</style>

<script>
    const fireflies = document.querySelectorAll<HTMLElement>('.firefly');

    const gridRows = 2;
    const gridCols = 5;

    fireflies.forEach((el, index) => {
        const col = index % gridCols;
        const row = Math.floor(index / gridCols);

        const cellWidth = 100 / gridCols;
        const cellHeight = 100 / gridRows;
        const x = col * cellWidth + Math.random() * cellWidth;
        const y = row * cellHeight + Math.random() * cellHeight;

        const delay = Math.random() * 5;
        const duration = 6 + Math.random() * 7.5;

        el.style.left = `${x}%`;
        el.style.top = `${y}%`;
        el.style.animationDelay = `${delay}s`;
        el.style.animationDuration = `${duration}s`;

        const setRandomDirection = () => {
            for (let i = 1; i <= 5; i++) {
                el.style.setProperty(`--random-x${i}`, Math.random().toString());
                el.style.setProperty(`--random-y${i}`, Math.random().toString());
            }
        };

        setRandomDirection();

        // Khi hết 1 vòng animation -> đổi waypoint mới
        el.addEventListener('animationiteration', setRandomDirection);
    });
</script>
