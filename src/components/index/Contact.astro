---
const { translations } = Astro.props;
---

<section id="contact" class="text-gray-300 font-mono my-16 sm:my-20 md:my-32 lg:my-40">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-32 my-12 sm:my-16 md:my-24 lg:my-32">
        <div class="flex items-center gap-3 sm:gap-4 mb-8 sm:mb-12" data-animate data-direction="top">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="w-8 h-8 sm:w-10 sm:h-10 neon-gradient-stroke"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.903l-11.25 6.75a2.25 2.25 0 01-2.108 0L2.25 9.196V6.75"
                ></path>
            </svg>
            <h1 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl text-white font-bold tracking-wider">
                {translations?.contact?.title}
            </h1>
        </div>

        <!-- Contact Form -->
        <form id="contact-form" action="https://formspree.io/f/mwpnbnoy" method="POST" class="w-full">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12">
                <!-- Left Column - Form Fields -->
                <div class="flex flex-col gap-6 sm:gap-8" data-animate data-direction="left">
                    <!-- Name Fields -->
                    <div class="group">
                        <label
                            for="firstName"
                            class="block text-lg sm:text-xl md:text-2xl text-white mb-3 font-semibold"
                        >
                            <span class="inline-block w-2 h-2 bg-purple-500 rounded-full mr-2 animate-pulse"></span>
                            {translations?.contact?.form?.name?.label}
                        </label>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div class="relative">
                                <input
                                    type="text"
                                    name="firstName"
                                    id="firstName"
                                    class="w-full bg-gray-800/50 backdrop-blur-sm text-gray-100 border border-gray-600 rounded-lg py-3 px-4 input-focus-effect focus:outline-none"
                                    placeholder={translations?.contact?.form?.name?.firstNamePlaceholder}
                                    required
                                />
                                <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                    <div class="w-2 h-2 bg-gray-500 rounded-full validation-indicator"></div>
                                </div>
                            </div>
                            <div class="relative">
                                <input
                                    type="text"
                                    name="lastName"
                                    id="lastName"
                                    class="w-full bg-gray-800/50 backdrop-blur-sm text-gray-100 border border-gray-600 rounded-lg py-3 px-4 input-focus-effect focus:outline-none"
                                    placeholder={translations?.contact?.form?.name?.lastNamePlaceholder}
                                    required
                                />
                                <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                    <div class="w-2 h-2 bg-gray-500 rounded-full validation-indicator"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Email Field -->
                    <div class="group">
                        <label for="email" class="block text-lg sm:text-xl md:text-2xl text-white mb-3 font-semibold">
                            <span class="inline-block w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></span>
                            {translations?.contact?.form?.email?.label}
                        </label>
                        <div class="relative">
                            <input
                                type="email"
                                name="email"
                                id="email"
                                class="w-full bg-gray-800/50 backdrop-blur-sm text-gray-100 border border-gray-600 rounded-lg py-3 px-4 input-focus-effect focus:outline-none"
                                placeholder={translations?.contact?.form?.email?.placeholder}
                                required
                            />
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                <div class="w-2 h-2 bg-gray-500 rounded-full validation-indicator"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Phone Field -->
                    <div class="group">
                        <label for="phone" class="block text-lg sm:text-xl md:text-2xl text-white mb-3 font-semibold">
                            <span class="inline-block w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                            {translations?.contact?.form?.phone?.label}
                            <span class="text-sm text-gray-400 font-normal"
                                >{translations?.contact?.form?.phone?.optional}</span
                            >
                        </label>
                        <div class="relative">
                            <input
                                type="tel"
                                name="phone"
                                id="phone"
                                class="w-full bg-gray-800/50 backdrop-blur-sm text-gray-100 border border-gray-600 rounded-lg py-3 px-4 input-focus-effect focus:outline-none"
                                placeholder={translations?.contact?.form?.phone?.placeholder}
                            />
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                <div class="w-2 h-2 bg-gray-500 rounded-full validation-indicator"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Message -->
                <div class="flex flex-col" data-animate data-direction="right">
                    <label for="message" class="block text-lg sm:text-xl md:text-2xl text-white mb-3 font-semibold">
                        <span class="inline-block w-2 h-2 bg-orange-500 rounded-full mr-2 animate-pulse"></span>
                        {translations?.contact?.form?.message?.label}
                    </label>
                    <div class="relative flex-1">
                        <textarea
                            name="message"
                            id="message"
                            rows="8"
                            class="w-full h-full min-h-[200px] lg:min-h-[300px] bg-gray-800/50 backdrop-blur-sm text-gray-100 border border-gray-600 rounded-lg p-4 input-focus-effect focus:outline-none resize-none"
                            placeholder={translations?.contact?.form?.message?.placeholder}
                            required></textarea>
                        <div class="absolute top-4 right-4">
                            <div class="w-2 h-2 bg-gray-500 rounded-full validation-indicator"></div>
                        </div>
                        <div class="absolute bottom-4 right-4 text-xs text-gray-500" id="char-count">
                            {translations?.contact?.form?.message?.charCount}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-center mt-8 sm:mt-12" data-animate data-direction="bottom">
                <button
                    type="submit"
                    id="submit-btn"
                    class="button-hover-effect neon-gradient-bg text-white font-bold py-4 px-8 sm:px-12 rounded-xl shadow-lg transition-all duration-300 text-lg relative group"
                >
                    <span class="relative z-10 flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                        {translations?.contact?.form?.submitButton}
                    </span>
                </button>
            </div>
        </form>

        <!-- Success Message -->
        <div id="contact-success-message" class="hidden text-center text-white mt-12 sm:mt-16" data-aos="fade-up">
            <div
                class="success-message max-w-lg mx-auto p-6 sm:p-8 bg-gray-800/50 backdrop-blur-sm border neon-gradient-border rounded-2xl"
            >
                <div class="mb-4">
                    <svg class="w-16 h-16 mx-auto text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h2 class="text-2xl sm:text-3xl font-bold mb-4">{translations?.contact?.successMessage?.title}</h2>
                <p class="text-lg sm:text-xl text-gray-300 leading-relaxed">
                    {translations?.contact?.successMessage?.text}
                </p>
                <button
                    id="send-another-btn"
                    class="mt-6 neon-gradient-text hover:opacity-80 transition-opacity duration-300 underline"
                >
                    {translations?.contact?.successMessage?.sendAnotherButton}
                </button>
            </div>
        </div>
    </div>
</section>

<script>
    const contactForm = document.getElementById('contact-form') as HTMLFormElement | null;
    const successMessage = document.getElementById('contact-success-message') as HTMLElement | null;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement | null;
    const sendAnotherBtn = document.getElementById('send-another-btn') as HTMLButtonElement | null;
    const messageTextarea = document.getElementById('message') as HTMLTextAreaElement | null;
    const charCount = document.getElementById('char-count') as HTMLElement | null;

    type FieldId = 'firstName' | 'lastName' | 'email' | 'phone' | 'message';
    const formFields: FieldId[] = ['firstName', 'lastName', 'email', 'phone', 'message'];

    function validateField(field: HTMLInputElement | HTMLTextAreaElement): boolean {
        const parent = field.parentElement as HTMLElement | null;
        const indicator = parent?.querySelector('.validation-indicator') as HTMLElement | null;
        let isValid = false;

        if (field.type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            isValid = emailRegex.test(field.value);
        } else if (field.type === 'tel') {
            isValid = field.value === '' || field.value.replace(/\D/g, '').length >= 10;
        } else {
            isValid = field.value.trim().length > 0;
        }

        if (isValid) {
            field.classList.remove('input-error');
            field.classList.add('input-success');
            if (indicator) {
                indicator.className = 'w-2 h-2 bg-green-500 rounded-full validation-indicator';
            }
        } else if (field.value.trim() !== '') {
            field.classList.add('input-error');
            field.classList.remove('input-success');
            if (indicator) {
                indicator.className = 'w-2 h-2 bg-red-500 rounded-full validation-indicator';
            }
        } else {
            field.classList.remove('input-error', 'input-success');
            if (indicator) {
                indicator.className = 'w-2 h-2 bg-gray-500 rounded-full validation-indicator';
            }
        }

        return isValid || (field.type === 'tel' && field.value === '');
    }

    if (messageTextarea && charCount) {
        messageTextarea.addEventListener('input', () => {
            const length = messageTextarea.value.length;
            const maxLength = 500;
            charCount.textContent = `${length} / ${maxLength} characters`;

            if (length > maxLength) {
                charCount.classList.add('text-red-400');
            } else if (length > maxLength * 0.8) {
                charCount.classList.add('text-yellow-400');
                charCount.classList.remove('text-red-400');
            } else {
                charCount.classList.remove('text-red-400', 'text-yellow-400');
            }
        });
    }

    formFields.forEach((fieldId) => {
        const field = document.getElementById(fieldId) as HTMLInputElement | HTMLTextAreaElement | null;
        if (!field) return;

        field.addEventListener('blur', () => validateField(field));
        field.addEventListener('input', () => {
            if (field.classList.contains('input-error')) {
                validateField(field);
            }
        });
    });

    if (contactForm && submitBtn && successMessage) {
        contactForm.addEventListener('submit', (event: SubmitEvent) => {
            event.preventDefault();

            let isFormValid = true;
            formFields.forEach((fieldId) => {
                const field = document.getElementById(fieldId) as HTMLInputElement | HTMLTextAreaElement | null;
                if (field?.required && !validateField(field)) {
                    isFormValid = false;
                }
            });

            if (!isFormValid) {
                const firstError = contactForm.querySelector('.input-error') as HTMLElement | null;
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    (firstError as HTMLInputElement).focus();
                }
                return;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="opacity-0">Send Message</span>';

            const formEl = event.target as HTMLFormElement;
            const data = new FormData(formEl);
            const url = formEl.action;

            fetch(url, {
                method: 'POST',
                body: data,
                headers: { Accept: 'application/json' },
            })
                .then((response) => {
                    if (!response.ok) throw new Error('Form submission failed');
                    contactForm.style.animation = 'fadeInUp 0.5s ease-out reverse';
                    setTimeout(() => {
                        contactForm.classList.add('hidden');
                        successMessage.classList.remove('hidden');
                        successMessage.scrollIntoView({ behavior: 'smooth' });
                    }, 500);
                })
                .catch((err) => {
                    console.error('Error submitting form:', err);
                    alert('Something went wrong. Please try again later or contact me directly.');
                })
                .finally(() => {
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                });
        });
    }

    if (sendAnotherBtn && contactForm && successMessage) {
        sendAnotherBtn.addEventListener('click', () => {
            successMessage.classList.add('hidden');
            contactForm.classList.remove('hidden');
            contactForm.reset();

            formFields.forEach((fieldId) => {
                const field = document.getElementById(fieldId) as HTMLInputElement | HTMLTextAreaElement | null;
                if (!field) return;
                field.classList.remove('input-error', 'input-success');
                const parent = field.parentElement as HTMLElement | null;
                const indicator = parent?.querySelector('.validation-indicator') as HTMLElement | null;
                if (indicator) {
                    indicator.className = 'w-2 h-2 bg-gray-500 rounded-full validation-indicator';
                }
            });

            if (charCount) {
                charCount.textContent = '0 / 500 characters';
                charCount.classList.remove('text-red-400', 'text-yellow-400');
            }

            contactForm.scrollIntoView({ behavior: 'smooth' });
        });
    }

    document.documentElement.style.scrollBehavior = 'smooth';
    document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Tab') document.body.classList.add('keyboard-navigation');
    });
    document.addEventListener('mousedown', () => {
        document.body.classList.remove('keyboard-navigation');
    });
</script>

<style>
    .neon-gradient-stroke {
        stroke: url(#neon-grad);
    }

    .neon-gradient-bg {
        background: linear-gradient(135deg, #a855f7, #ec4899);
    }

    .neon-gradient-border {
        border-color: transparent;
        border-width: 2px;
        background:
            linear-gradient(#1f2937, #1f2937) padding-box,
            linear-gradient(135deg, #a855f7, #ec4899) border-box;
    }

    .neon-gradient-text {
        background: linear-gradient(135deg, #a855f7, #ec4899);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .input-focus-effect {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .input-focus-effect:focus {
        border: 2px solid transparent;
        background:
            linear-gradient(#1f2937, #1f2937) padding-box,
            linear-gradient(135deg, #a855f7, #ec4899) border-box;
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(168, 85, 247, 0.3);
    }

    .button-hover-effect {
        position: relative;
        overflow: hidden;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .button-hover-effect:before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.6s;
    }

    .button-hover-effect:hover:before {
        left: 100%;
    }

    .button-hover-effect:hover {
        transform: translateY(-3px);
        box-shadow:
            0 15px 30px rgba(168, 85, 247, 0.4),
            0 0 40px rgba(236, 72, 153, 0.3);
    }

    .success-message {
        animation: fadeInUp 0.8s ease-out forwards;
    }

    .loading {
        position: relative;
        pointer-events: none;
    }

    .loading:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin-left: -10px;
        margin-top: -10px;
        border: 2px solid transparent;
        border-top: 2px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .input-error {
        border-color: #ef4444 !important;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }

    .input-success {
        border: 2px solid transparent;
        background:
            linear-gradient(#1f2937, #1f2937) padding-box,
            linear-gradient(135deg, #10b981, #10b981) border-box;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
    }

    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: #1f2937;
    }

    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #a855f7, #ec4899);
        border-radius: 4px;
    }
</style>

<svg width="0" height="0" style="position: absolute;">
    <defs>
        <linearGradient id="neon-grad" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#a855f7;stop-opacity:1"></stop>
            <stop offset="100%" style="stop-color:#ec4899;stop-opacity:1"></stop>
        </linearGradient>
    </defs>
</svg>
